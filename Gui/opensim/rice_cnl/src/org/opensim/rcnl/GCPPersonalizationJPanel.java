/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.opensim.rcnl;

import java.awt.Dialog;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.util.Exceptions;
import org.opensim.modeling.AbstractProperty;
import org.opensim.modeling.Model;
import org.opensim.modeling.OpenSimObject;
import org.opensim.modeling.PropertyObjectList;
import org.opensim.modeling.Storage;
import org.opensim.utils.FileUtils;
import org.opensim.view.pub.OpenSimDB;

/**
 *
 * @author Ayman-NMBL
 */
public class GCPPersonalizationJPanel extends BaseToolPanel  implements Observer {
    private GCPPersonalizationToolModel gcpPersonalizationToolModel = null;
    private Model model;
    private GCPSurfaceListModel gcpListModel = null;
    private PropertyObjectList surfaceListProp = null;
    private ListSelectionModel listSelectionModel = null;
    private Storage grfStorage = null;
    /**
     * Creates new form JointPersonalizationJPanel
     */
    public GCPPersonalizationJPanel(Model model)  throws IOException  {
       if(model==null) throw new IOException("GCPPersonalizationJPanel got null model");
       this.model = model;
       gcpPersonalizationToolModel = new GCPPersonalizationToolModel(model);
       OpenSimObject tool = gcpPersonalizationToolModel.getToolAsObject();
       AbstractProperty ap = tool.getPropertyByName("GCPContactSurfaceSet");
       surfaceListProp = PropertyObjectList.updAs(ap);
       gcpListModel= new GCPSurfaceListModel(surfaceListProp);
       initComponents();
       GCPContactSurfaceList.setModel(gcpListModel);
       listSelectionModel = GCPContactSurfaceList.getSelectionModel();
       listSelectionModel.addListSelectionListener(new ListSelectionHandler());
       currentModelFileTextField.setText(gcpPersonalizationToolModel.getInputModelFile());
       outputResultDirPath.setDialogTitle("Select output directory");
       outputResultDirPath.setDirectoriesOnly(true);
       outputResultDirPath.setCheckIfFileExists(false);
       osimxFilePath.setDialogTitle("Select osimx file");
       osimxFilePath.setDirectoriesOnly(false);
       osimxFilePath.setExtensionsAndDescription(".osimx", "File to contain pipeline specific entities");
       inputDirPath.setDialogTitle("Select input data directory");
       inputDirPath.setDirectoriesOnly(true);
       inputDirPath.setCheckIfFileExists(true);
       motionFilePath.setDialogTitle("Select input motion file");
       motionFilePath.setDirectoriesOnly(false);
       motionFilePath.setCheckIfFileExists(true);
       motionFilePath.setExtensionsAndDescription(".mot", "File to contain input motion");
       grfFilePath.setDialogTitle("Select input ground reaction forces file");
       grfFilePath.setDirectoriesOnly(false);
       grfFilePath.setCheckIfFileExists(true);
       grfFilePath.setExtensionsAndDescription(".mot", "File to contain ground reaction forces");
       
       //jCoordinateListTextArea.setText("Coordinates");
       setSettingsFileDescription("Save Greound Contact Personalization Settings file (xml)");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputModelPanel = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        currentModelFileTextField = new javax.swing.JTextField();
        osimxFilePath = new org.opensim.swingui.FileTextFieldAndChooser();
        jLabel3 = new javax.swing.JLabel();
        inputDirPath = new org.opensim.swingui.FileTextFieldAndChooser();
        jLabel4 = new javax.swing.JLabel();
        motionFilePath = new org.opensim.swingui.FileTextFieldAndChooser();
        jLabel2 = new javax.swing.JLabel();
        grfFilePath = new org.opensim.swingui.FileTextFieldAndChooser();
        jLabel5 = new javax.swing.JLabel();
        outputPanel = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        outputResultDirPath = new org.opensim.swingui.FileTextFieldAndChooser();
        settingsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        GCPContactSurfaceList = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        addGCPSurfaceButton = new javax.swing.JButton();
        editGCPSurfaceButton = new javax.swing.JButton();
        deleteGCPSurfaceButton = new javax.swing.JButton();

        inputModelPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), org.openide.util.NbBundle.getMessage(GCPPersonalizationJPanel.class, "GCPPersonalizationJPanel.inputModelPanel.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel13, org.openide.util.NbBundle.getMessage(GCPPersonalizationJPanel.class, "GCPPersonalizationJPanel.jLabel13.text")); // NOI18N

        currentModelFileTextField.setEditable(false);
        currentModelFileTextField.setToolTipText(org.openide.util.NbBundle.getMessage(GCPPersonalizationJPanel.class, "GCPPersonalizationJPanel.currentModelFileTextField.toolTipText")); // NOI18N
        currentModelFileTextField.setMinimumSize(new java.awt.Dimension(3, 20));

        osimxFilePath.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                osimxFilePathStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(GCPPersonalizationJPanel.class, "GCPPersonalizationJPanel.jLabel3.text")); // NOI18N

        inputDirPath.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                inputDirPathStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(GCPPersonalizationJPanel.class, "GCPPersonalizationJPanel.jLabel4.text")); // NOI18N

        motionFilePath.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                motionFilePathStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(GCPPersonalizationJPanel.class, "GCPPersonalizationJPanel.jLabel2.text")); // NOI18N

        grfFilePath.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                grfFilePathStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(GCPPersonalizationJPanel.class, "GCPPersonalizationJPanel.jLabel5.text")); // NOI18N

        javax.swing.GroupLayout inputModelPanelLayout = new javax.swing.GroupLayout(inputModelPanel);
        inputModelPanel.setLayout(inputModelPanelLayout);
        inputModelPanelLayout.setHorizontalGroup(
            inputModelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputModelPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(inputModelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputModelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(osimxFilePath, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                    .addComponent(currentModelFileTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(inputDirPath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(motionFilePath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(grfFilePath, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        inputModelPanelLayout.setVerticalGroup(
            inputModelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputModelPanelLayout.createSequentialGroup()
                .addGroup(inputModelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(currentModelFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inputModelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(osimxFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inputModelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputDirPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inputModelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(motionFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(inputModelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(grfFilePath, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputModelPanelLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addContainerGap())))
        );

        outputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), org.openide.util.NbBundle.getMessage(GCPPersonalizationJPanel.class, "GCPPersonalizationJPanel.outputPanel.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel11, org.openide.util.NbBundle.getMessage(GCPPersonalizationJPanel.class, "GCPPersonalizationJPanel.jLabel11.text")); // NOI18N

        outputResultDirPath.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                outputResultDirPathStateChanged(evt);
            }
        });

        javax.swing.GroupLayout outputPanelLayout = new javax.swing.GroupLayout(outputPanel);
        outputPanel.setLayout(outputPanelLayout);
        outputPanelLayout.setHorizontalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputResultDirPath, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        outputPanelLayout.setVerticalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(outputResultDirPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        settingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), org.openide.util.NbBundle.getMessage(GCPPersonalizationJPanel.class, "GCPPersonalizationJPanel.settingsPanel.border.title"))); // NOI18N

        GCPContactSurfaceList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(GCPContactSurfaceList);

        org.openide.awt.Mnemonics.setLocalizedText(addGCPSurfaceButton, org.openide.util.NbBundle.getMessage(GCPPersonalizationJPanel.class, "GCPPersonalizationJPanel.addGCPSurfaceButton.text")); // NOI18N
        addGCPSurfaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGCPSurfaceButtonaddJMPTaskButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(editGCPSurfaceButton, org.openide.util.NbBundle.getMessage(GCPPersonalizationJPanel.class, "GCPPersonalizationJPanel.editGCPSurfaceButton.text")); // NOI18N
        editGCPSurfaceButton.setEnabled(false);
        editGCPSurfaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editGCPSurfaceButtoneditJMPTaskButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(deleteGCPSurfaceButton, org.openide.util.NbBundle.getMessage(GCPPersonalizationJPanel.class, "GCPPersonalizationJPanel.deleteGCPSurfaceButton.text")); // NOI18N
        deleteGCPSurfaceButton.setEnabled(false);
        deleteGCPSurfaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteGCPSurfaceButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(deleteGCPSurfaceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editGCPSurfaceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addGCPSurfaceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(addGCPSurfaceButton)
                .addGap(18, 18, 18)
                .addComponent(editGCPSurfaceButton)
                .addGap(18, 18, 18)
                .addComponent(deleteGCPSurfaceButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputModelPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(settingsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(outputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(inputModelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(settingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void outputResultDirPathStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_outputResultDirPathStateChanged
        // TODO add your handling code here:
         gcpPersonalizationToolModel.setOutputResultDir(outputResultDirPath.getFileName());
    }//GEN-LAST:event_outputResultDirPathStateChanged

    private void osimxFilePathStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_osimxFilePathStateChanged
        // TODO add your handling code here:
        gcpPersonalizationToolModel.setInputOsimxFile(osimxFilePath.getFileName());
    }//GEN-LAST:event_osimxFilePathStateChanged

    private void inputDirPathStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_inputDirPathStateChanged
        // TODO add your handling code here:
        gcpPersonalizationToolModel.setDataDir(inputDirPath.getFileName());
    }//GEN-LAST:event_inputDirPathStateChanged

    private void motionFilePathStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_motionFilePathStateChanged
        // TODO add your handling code here:
        gcpPersonalizationToolModel.setInputMotionFile(motionFilePath.getFileName());
    }//GEN-LAST:event_motionFilePathStateChanged

    private void grfFilePathStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_grfFilePathStateChanged
        // TODO add your handling code here:
        gcpPersonalizationToolModel.setInputGRFFile(grfFilePath.getFileName());
    }//GEN-LAST:event_grfFilePathStateChanged

    private void addGCPSurfaceButtonaddJMPTaskButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGCPSurfaceButtonaddJMPTaskButtonActionPerformed
        try {
            // TODO add your handling code here:
            OpenSimObject gcpContactSurface = OpenSimObject.newInstanceOfType("GCPContactSurface");
            grfStorage = new Storage(gcpPersonalizationToolModel.geInputGRFFile());
            EditGCPSurfaceJPanel ejtPanel = new EditGCPSurfaceJPanel(gcpContactSurface, grfStorage);
            DialogDescriptor dlg = new DialogDescriptor(ejtPanel, "Create/Edit One GCPContactSurface ");
            Dialog d = DialogDisplayer.getDefault().createDialog(dlg);
            d.setVisible(true);
            Object userInput = dlg.getValue();
            if (((Integer)userInput).compareTo((Integer)DialogDescriptor.OK_OPTION)==0){
                gcpListModel.addElement(gcpContactSurface);
                gcpContactSurface.markAdopted(); //indicate ownership will be transferred so that object is not deleted by gc
                surfaceListProp.adoptAndAppendValue(gcpContactSurface);
            }
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_addGCPSurfaceButtonaddJMPTaskButtonActionPerformed

    private void editGCPSurfaceButtoneditJMPTaskButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editGCPSurfaceButtoneditJMPTaskButtonActionPerformed
        try {
            // TODO add your handling code here:
            int[] sels = GCPContactSurfaceList.getSelectedIndices();
            int idx = sels[0];
            OpenSimObject selectedSurface = (OpenSimObject)gcpListModel.get(idx);
            OpenSimObject surfaceCopy = selectedSurface.clone();
            grfStorage = new Storage(gcpPersonalizationToolModel.geInputGRFFile());
            EditGCPSurfaceJPanel gcpSurfacePanel = new EditGCPSurfaceJPanel(surfaceCopy, grfStorage);
            DialogDescriptor dlg = new DialogDescriptor(gcpSurfacePanel, "Create/Edit One GCPContactSurface");
            Dialog d = DialogDisplayer.getDefault().createDialog(dlg);
            d.setVisible(true);
            Object userInput = dlg.getValue();
            if (((Integer)userInput).compareTo((Integer)DialogDescriptor.OK_OPTION)==0){
                gcpListModel.set(idx, surfaceCopy);
                surfaceListProp.setValue(idx, surfaceCopy);
            }
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_editGCPSurfaceButtoneditJMPTaskButtonActionPerformed

    private void deleteGCPSurfaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteGCPSurfaceButtonActionPerformed
        // TODO add your handling code here:
        int[] sels = GCPContactSurfaceList.getSelectedIndices();
        Vector<Integer> surfacesToDelete = new Vector<Integer>();
        for (int i=0; i<sels.length; i++){
            surfacesToDelete.add(sels[i]);
        }
        // Delete items from jmpJointListModel in reverse order
        for (int r=surfacesToDelete.size(); r >0; r-- ){
            gcpListModel.remove(surfacesToDelete.get(r-1));
            surfaceListProp.removeValueAtIndex(surfacesToDelete.get(r-1));
        }
        // Recreate list model to cleanup
        gcpListModel= new GCPSurfaceListModel(surfaceListProp);
        GCPContactSurfaceList.setModel(gcpListModel);
    }//GEN-LAST:event_deleteGCPSurfaceButtonActionPerformed

    @Override
    public void update(Observable o, Object o1) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void pressedCancel() {
        super.pressedCancel(); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void saveSettings(String fileName) {
         String fullFilename = FileUtils.addExtensionIfNeeded(fileName, ".xml");
         OpenSimObject.setSerializeAllDefaults(true);
         String toolFileContent = gcpPersonalizationToolModel.getToolAsObject().dump();
         BufferedWriter writer;
        try {
            writer = new BufferedWriter(new FileWriter(fullFilename));
            writer.write(toolFileContent);
            writer.close();
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    @Override
    public void loadSettings(String fileName) {
        Model model = OpenSimDB.getInstance().getCurrentModel();
       //if(model==null) throw new IOException("JointPersonalizationJPanel got null model");
       gcpPersonalizationToolModel = new GCPPersonalizationToolModel(model, fileName);
       osimxFilePath.setFileName(gcpPersonalizationToolModel.getInputOsimxFile());
       inputDirPath.setFileName(gcpPersonalizationToolModel.getDataDir());
       outputResultDirPath.setFileName(gcpPersonalizationToolModel.getOutputResultDir());

    }

    @Override
    public void setSettingsFileDescription(String description) {
        super.setSettingsFileDescription(description); //To change body of generated methods, choose Tools | Templates.
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> GCPContactSurfaceList;
    private javax.swing.JButton addGCPSurfaceButton;
    private javax.swing.JTextField currentModelFileTextField;
    private javax.swing.JButton deleteGCPSurfaceButton;
    private javax.swing.JButton editGCPSurfaceButton;
    private org.opensim.swingui.FileTextFieldAndChooser grfFilePath;
    private org.opensim.swingui.FileTextFieldAndChooser inputDirPath;
    private javax.swing.JPanel inputModelPanel;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private org.opensim.swingui.FileTextFieldAndChooser motionFilePath;
    private org.opensim.swingui.FileTextFieldAndChooser osimxFilePath;
    private javax.swing.JPanel outputPanel;
    private org.opensim.swingui.FileTextFieldAndChooser outputResultDirPath;
    private javax.swing.JPanel settingsPanel;
    // End of variables declaration//GEN-END:variables
    private class ListSelectionHandler implements ListSelectionListener {

        public ListSelectionHandler() {
        }

        @Override
        public void valueChanged(ListSelectionEvent lse) {
            // Disable delete if nothing is selected
            // Enable edit if single selection
            int[] sels = GCPContactSurfaceList.getSelectedIndices();
            editGCPSurfaceButton.setEnabled(sels.length==1);
            deleteGCPSurfaceButton.setEnabled(sels.length>=1);
            
        }
    }
}
