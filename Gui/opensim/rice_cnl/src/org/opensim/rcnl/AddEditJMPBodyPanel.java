/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.opensim.rcnl;

import java.text.NumberFormat;
import java.text.ParseException;
import java.util.Vector;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import org.openide.util.Exceptions;
import org.opensim.modeling.AbstractProperty;
import org.opensim.modeling.Body;
import org.opensim.modeling.Joint;
import org.opensim.modeling.JointList;
import org.opensim.modeling.Model;
import org.opensim.modeling.OpenSimObject;
import org.opensim.modeling.PropertyBoolList;
import org.opensim.modeling.PropertyDoubleList;
import org.opensim.modeling.PropertyHelper;
import org.opensim.modeling.PropertyObjectList;
import org.opensim.modeling.PropertyStringList;
import org.opensim.view.pub.OpenSimDB;

/**
 *
 * @author Ayman-NMBL
 */
public class AddEditJMPBodyPanel extends javax.swing.JPanel {

    OpenSimObject jmpTask;
    ComboBoxModel<String> cbm;
    private NumberFormat numFormat = NumberFormat.getInstance();
    private Vector<OpenSimObject> savedTasks = new Vector<OpenSimObject>();
    private boolean initializing = true;
    AbstractProperty toScaleProp;
    AbstractProperty moveMarkersProp;
    AbstractProperty primayAxisProp;
    boolean scale_bod = false;
    boolean move_markers_x = false;
    boolean move_markers_y = false;
    boolean move_markers_z = false;
    String primary_body_axis = " ";
    String[] axisNames = new String[] { "None", "x", "y", "z" };
    /**
     * Creates new form AddEditJointPanel
     */
    public AddEditJMPBodyPanel(OpenSimObject jmpBodyTask) {
        this.jmpTask = jmpBodyTask;
        cbm = new BodyListModel(OpenSimDB.getInstance().getCurrentModel());
        initComponents();
        jComboBoxBodies.setModel(cbm);

        toScaleProp = jmpBodyTask.getPropertyByName("scale_bodies");
        scale_bod = PropertyBoolList.getAs(toScaleProp).getValue(0);
        
        moveMarkersProp = jmpBodyTask.getPropertyByName("move_markers");
        move_markers_x = PropertyBoolList.getAs(moveMarkersProp).getValue(0);
        move_markers_y = PropertyBoolList.getAs(moveMarkersProp).getValue(1);
        move_markers_z = PropertyBoolList.getAs(moveMarkersProp).getValue(2);
        
        populateUiFromObject();
        initializing = false;
        updateTask();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBoxBodies = new javax.swing.JComboBox<>();
        jCheckBoxScale = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jCheckBoxXDir1 = new javax.swing.JCheckBox();
        jCheckBoxXDir2 = new javax.swing.JCheckBox();
        jCheckBoxXDir3 = new javax.swing.JCheckBox();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(AddEditJMPBodyPanel.class, "AddEditJMPBodyPanel.border.title"), javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION)); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(AddEditJMPBodyPanel.class, "AddEditJMPBodyPanel.jLabel1.text")); // NOI18N

        jComboBoxBodies.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "hip_r", "knee_r", "hip_l", "knee_l" }));
        jComboBoxBodies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxBodiesActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxScale, org.openide.util.NbBundle.getMessage(AddEditJMPBodyPanel.class, "AddEditJMPBodyPanel.jCheckBoxScale.text")); // NOI18N
        jCheckBoxScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxScaleActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(AddEditJMPBodyPanel.class, "AddEditJMPBodyPanel.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxXDir1, org.openide.util.NbBundle.getMessage(AddEditJMPBodyPanel.class, "AddEditJMPBodyPanel.jCheckBoxXDir1.text")); // NOI18N
        jCheckBoxXDir1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxXDir1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxXDir2, org.openide.util.NbBundle.getMessage(AddEditJMPBodyPanel.class, "AddEditJMPBodyPanel.jCheckBoxXDir2.text")); // NOI18N
        jCheckBoxXDir2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxXDir2ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxXDir3, org.openide.util.NbBundle.getMessage(AddEditJMPBodyPanel.class, "AddEditJMPBodyPanel.jCheckBoxXDir3.text")); // NOI18N
        jCheckBoxXDir3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxXDir3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxBodies, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jCheckBoxScale)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(jCheckBoxXDir1)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBoxXDir3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(jCheckBoxXDir2)
                    .addContainerGap(406, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxBodies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxScale)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxXDir1)
                    .addComponent(jCheckBoxXDir3))
                .addGap(17, 17, 17))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(150, Short.MAX_VALUE)
                    .addComponent(jCheckBoxXDir2)
                    .addGap(18, 18, 18)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxBodiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxBodiesActionPerformed
        // TODO add your handling code here:
        updateTask();
    }//GEN-LAST:event_jComboBoxBodiesActionPerformed

    private void jCheckBoxScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxScaleActionPerformed
        // TODO add your handling code here:
        updateTask();
    }//GEN-LAST:event_jCheckBoxScaleActionPerformed

    private void jCheckBoxXDir2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxXDir2ActionPerformed
        // TODO add your handling code here:
        updateTask();
    }//GEN-LAST:event_jCheckBoxXDir2ActionPerformed

    private void jCheckBoxXDir1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxXDir1ActionPerformed
        // TODO add your handling code here:
        updateTask();
    }//GEN-LAST:event_jCheckBoxXDir1ActionPerformed

    private void jCheckBoxXDir3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxXDir3ActionPerformed
        updateTask();        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxXDir3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBoxScale;
    private javax.swing.JCheckBox jCheckBoxXDir1;
    private javax.swing.JCheckBox jCheckBoxXDir2;
    private javax.swing.JCheckBox jCheckBoxXDir3;
    private javax.swing.JComboBox<String> jComboBoxBodies;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

    private void updateTask() {
        if (initializing) // Avoid side effect of setting UI in the middle of populating Ui
            return;
        
        jmpTask.setName(((Body) jComboBoxBodies.getSelectedItem()).getName());
        PropertyBoolList.getAs(toScaleProp).setValue(0, jCheckBoxScale.isSelected());
        PropertyBoolList.getAs(moveMarkersProp).setValue(0, jCheckBoxXDir1.isSelected());
        PropertyBoolList.getAs(moveMarkersProp).setValue(1, jCheckBoxXDir2.isSelected());
        PropertyBoolList.getAs(moveMarkersProp).setValue(2, jCheckBoxXDir3.isSelected());

        //System.out.println(jmpTask.dump());
    }

    private void populateUiFromObject() {
        Model model = OpenSimDB.getInstance().getCurrentModel();
        int jlistIndex = model.getBodySet().getIndex(jmpTask.getName());
        if (jlistIndex==-1){ // default, pick first joint
            cbm.setSelectedItem(model.getBodySet().get(0));
        }
        else
            cbm.setSelectedItem(model.getBodySet().get(jmpTask.getName()));
        
        jCheckBoxScale.setSelected(scale_bod);
        jCheckBoxXDir1.setSelected(move_markers_x);
        jCheckBoxXDir2.setSelected(move_markers_y);
        jCheckBoxXDir3.setSelected(move_markers_z);

    }
}
